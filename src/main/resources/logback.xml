<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--上下文名称，用于区分不同应用程序的记录-->
    <contextName>logback-demo</contextName>

    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志格式 -->
        <encoder>
            <!-- %m输出的信息, %p日志级别, %t线程名, %d日期, %c类的全名, %i索引 -->
            <pattern>%date{yyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{0} [%method:%line] - %msg%n</pattern>
            <!-- 控制台也要使用utf-8，不要使用gbk -->
            <charset>UTF-8</charset>
        </encoder>
        <!--如果控制台需要指定只输出指定级别的日志，则配置filter即可，如果不配，那么控制台输出的是root level以上的所有级别日志 -->
        
    </appender>

    <!-- 配置数据库相关参数properties的属性：${url} -->
    <property name="log.path" value="/data0/logs/java/duoduodai.fin.fdd"/>
    
    <!-- 文件滚动输出 level为 INFO 日志 -->
    <appender name="file-info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤单INFO级别 -->
            <level>INFO</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是info.log -->
        <file>${log.path}/info.log</file>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 旧日志文件名格式 -->
            <FileNamePattern>${log.path}/%d{yyyy-MM-dd}/info.%i.log</FileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的最大保存时间：30天-->
            <MaxHistory>30</MaxHistory>
            <!-- 2.如果日期没有变化，但是当前日志文件的大小超过1kb时，对当前日志进行分割 重名名 -->
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%date{yyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{0} [%method:%line] - %msg%n</pattern>
            <!-- 日志的编码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 文件滚动输出 level为 ERROR 日志 -->
    <appender name="file-error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤单ERROR级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是error.log -->
        <file>${location}/error.log</file>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 旧日志文件名格式:按天 -->
            <FileNamePattern>${location}/%d{yyyy-MM-dd}/error.%i.log</FileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的最大保存时间：30天-->
            <MaxHistory>30</MaxHistory>
            <!-- 2.如果日期没有变化，但是当前日志文件的大小超过1kb时，对当前日志进行分割 重名名 -->
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%date{yyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{0} [%method:%line] - %msg%n</pattern>
            <!-- 日志的编码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!-- 文件滚动输出 level为root level以上的所有级别日志 -->
    <appender name="file—server" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是info.log -->
        <file>${log.path}/server.log</file>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 旧日志文件名格式 -->
            <FileNamePattern>${log.path}/%d{yyyy-MM-dd}/server.%i.log</FileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的最大保存时间：30天-->
            <MaxHistory>30</MaxHistory>
            <!-- 2.如果日期没有变化，但是当前日志文件的大小超过1kb时，对当前日志进行分割 重名名 -->
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%date{yyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{0} [%method:%line] - %msg%n</pattern>
            <!-- 日志的编码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    
    <!-- 指定项目可输出的最低级别日志,具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置-->
    <root level="info">
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="file-info" />
        <appender-ref ref="file-error" />
        <appender-ref ref="file—server" />
    </root>
    <!-- 很多人使用MYBATIS的时候，控制台不能输出SQL语句，造成调试困难。只需要让DAO层的日志级别调整为DEBUG就可以了 -->
    <logger name="com.duoduodai.dao.mapping" level="DEBUG"/>
</configuration>